package query

type parser Peg {
	expression
}

#### Query

Query <- _ ColumnExpr? _ WhereExpr? _ GroupExpr? _ OrderByExpr? _ LimitExpr? _ !.

#### Main expressions

ColumnExpr <-
  "SELECT" _ { p.currentSection = "columns" }
  Columns

GroupExpr <-
  "GROUP BY" _ { p.currentSection = "group by" }
  Columns

WhereExpr <-
  "WHERE" _
  LogicExpr (_ COMMA? LogicExpr)*

OrderByExpr <-
  "ORDER BY" _ { p.currentSection = "order by" }
  Columns
  Descending ?

LimitExpr <-
  "LIMIT" _
  < Unsigned > { p.SetLimit(text) }

#### Columns

Columns <-
  Column
  (
    COMMA
    Column
  )*

Column <-
  { p.AddColumn() }
  (
    ColumnAggregation
    / < Identifier > _ { p.SetColumnName(text) }
	/ < '*' > _ { p.SetColumnName(text) }
  )

ColumnAggregation <-
  < Identifier >           { p.SetColumnAggregate(text) }
  LPAR < Identifier > RPAR { p.SetColumnName(text)      }

#### WHERE expressions

LogicExpr <-
  (
    LPAR
    LogicExpr
    RPAR
  )
  /
  (
    { p.AddFilter() }
    FilterKey
    _ FilterOperator _
    FilterValue
  )

OPERATOR <-
  '='
  / '!='
  / '<='
  / '>='
  / '<'
  / '>'
  / "matches"

FilterKey <-
  < Identifier > { p.SetFilterColumn(text) }

FilterOperator <-
  < OPERATOR > { p.SetFilterOperator(text) }

FilterValue <-
  < Float > { p.SetFilterValueFloat(text) }
  / < Integer > { p.SetFilterValueInteger(text) }
  / < String > { p.SetFilterValueString(text) }

#### Order

Descending <-
  "DESC" { p.SetDescending() }

#### Strings

String <-
  (["] < StringChar* > ["])+

StringChar <-
  Escape / ![\"\n\\] .

Escape <-
  SimpleEscape
  / OctalEscape
  / HexEscape
  / UniversalCharacter

SimpleEscape <-
  '\\' ['\"?\\abfnrtv]

OctalEscape <-
  '\\' [0-7][0-7]?[0-7]?

HexEscape <-
  '\\x' HexDigit+

UniversalCharacter <-
  '\\u' HexQuad
  / '\\U' HexQuad HexQuad

HexQuad <-
  HexDigit HexDigit HexDigit HexDigit

HexDigit <-
  [a-f] / [A-F] / [0-9]

##### Numbers

Unsigned <-
  [0-9]+

Sign <-
  '-' / '+'

Integer <-
  < Sign? Unsigned >

Float <-
  Integer ('.' Unsigned)?
  ( ('e' / 'E' ) Integer )?

#### Identifiers

Identifier <-
  !Keyword < [a-zA-Z_] IdChar* >

IdChar <-
  [a-zA-Z0-9_]

Keyword <-
  ('select'
  / 'group by'
  / 'filters'
  / 'order by'
  / 'desc'
  / 'limit') !IdChar

#### Whitespace

_ <-
  (
    ' '
    / '\t'
    / '\r\n'
    / '\n'
    / '\r'
  )*

#### Misc

LPAR <-
  _ '(' _
RPAR <-
  _ ')' _
COMMA <-
  _ ',' _
